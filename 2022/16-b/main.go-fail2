package main

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"os"
	"regexp"
	"sort"
	"strconv"
	"strings"
)

const (
	totalTime = 26
	searchers = 2
)

type valve struct {
	rate int
}
type tunnel struct {
	valves []string
}
type path struct {
	prev       *path  // previous steps back to nil at the start
	curName    string // name of valve
	arriveTime int    // time that you arrive at this location and finish opening the valve
	totalFlow  int    // sum of this and all previous open valves for the remainder
}
type pathSet [searchers]*path

func main() {
	valves := map[string]valve{}
	tunnels := map[string]tunnel{}
	in := bufio.NewScanner(os.Stdin)
	lineRE := regexp.MustCompile(`^Valve ([A-Z]+) has flow rate=([0-9]+); tunnels? leads? to valves? (.*)$`)

	// parse input
	for in.Scan() {
		line := strings.TrimSpace(in.Text())
		if line == "" {
			continue
		}
		match := lineRE.FindStringSubmatch(line)
		if len(match) < 4 {
			fmt.Fprintf(os.Stderr, "line parsing failed for: %s\n", line)
			return
		}
		v := match[1]
		rate := mustAtoi(match[2])
		tunList := strings.Split(match[3], ", ")
		valves[v] = valve{rate: rate}
		tunnels[v] = tunnel{valves: tunList}
	}
	if err := in.Err(); err != nil && !errors.Is(err, io.EOF) {
		fmt.Fprintf(os.Stderr, "failed reading from stdin: %v\n", err)
		return
	}

	// get a list of all valves where you'd start a path
	startNames := []string{"AA"}
	for name, v := range valves {
		if v.rate > 0 {
			startNames = append(startNames, name)
		}
	}
	// get distances from starting points to any valve with a rate > 0
	distances := map[string]map[string]int{}
	for _, start := range startNames {
		distances[start] = map[string]int{}
		dFound := map[string]int{}
		curSearch := []string{start}
		for len(curSearch) > 0 {
			nextSearch := []string{}
			for _, cur := range curSearch {
				for _, next := range tunnels[cur].valves {
					if _, ok := dFound[next]; ok {
						continue
					}
					dFound[next] = dFound[cur] + 1
					if valves[next].rate > 0 {
						distances[start][next] = dFound[next]
					}
					nextSearch = append(nextSearch, next)
				}
			}
			curSearch = nextSearch
		}
	}

	paths := []*pathSet{
		{{
			curName:    "AA",
			arriveTime: 1,
		}, {
			curName:    "AA",
			arriveTime: 1,
		}},
	}
	bestEnd := 0 // best entry added to endPaths
	endPaths := []*pathSet{}
	// loop through each minute
	for t := 1; t < totalTime; t++ {
		fmt.Printf("Searching at time %d, paths=%d, bestEnd=%d\n", t, len(paths), bestEnd)
		nextPaths := []*pathSet{}
		// loop through each path
		for i, ps := range paths {
			if i%2000000 < 5 {
				fmt.Printf("Sample %d:\n", i)
				ps.print()
			}
			ps := ps
			// postpone paths neither has arrived at yet
			if ps[0].arriveTime > t && ps[1].arriveTime > t {
				nextPaths = append(nextPaths, ps)
			}
			moves := [searchers][]*path{}
			// come up with a list of moves each searcher can make
			for s, p := range ps {
				p := p
				// skip points in the future
				if p.arriveTime > t {
					moves[s] = []*path{p}
					continue
				}
				// drop paths that aren't as good as the best, but only check after we reach their time
				if !p.bestPath() {
					continue
				}
				// skip stuck entries in the past
				if p.arriveTime < t {
					moves[s] = []*path{p}
					continue
				}
				// try each route to each useful valve
				for dest, distance := range distances[p.curName] {
					if t+distance >= totalTime {
						continue // path can't be reached in time to open valve
					}
					tryPath := path{
						prev:       p,
						curName:    dest,
						arriveTime: t + distance + 1,
						totalFlow:  p.totalFlow + valves[dest].rate*(totalTime-t-distance),
					}
					if tryPath.validPath() {
						moves[s] = append(moves[s], &tryPath)
					}
				}
				// if no moves, we're stuck, maybe other searcher is still making progress
				if len(moves[s]) == 0 {
					moves[s] = []*path{p}
				}
			}
			// check if both searchers are stuck, move to end
			if len(moves[0]) == 1 && len(moves[1]) == 1 &&
				moves[0][0].curName == ps[0].curName && moves[1][0].curName == ps[1].curName &&
				ps[0].arriveTime <= t && ps[1].arriveTime <= t {
				total := ps.total()
				if total > bestEnd {
					bestEnd = total
					endPaths = []*pathSet{ps}
				}
				continue
			}
			// generate all valid paths based on permutations of valid moves
			foundValid := false
			for _, m0 := range moves[0] {
				for _, m1 := range moves[1] {
					p0, p1 := *m0, *m1
					psAdd := pathSet{&p0, &p1}
					if psAdd.validPath() {
						nextPaths = append(nextPaths, &psAdd)
						foundValid = true
					}
				}
			}
			if !foundValid {
				// add the last state if it was better, otherwise it gets dropped
				total := ps.total()
				if total > bestEnd {
					bestEnd = total
					endPaths = []*pathSet{ps}
				}
			}
		}
		paths = nextPaths
	}
	endPaths = append(endPaths, paths...)

	// look through paths to find best flow, show path
	bestI := 0
	bestRate := 0
	for i, ps := range endPaths {
		total := ps.total()
		if total > bestRate {
			bestI = i
			bestRate = total
		}
	}
	fmt.Printf("Best path: \n")
	endPaths[bestI].print()
	fmt.Printf("Result: %d\n", bestRate)
}

func (ps pathSet) print() {
	for i, p := range ps {
		fmt.Printf("Searcher %d: ", i)
		cur := p
		txt := []string{}
		for cur != nil {
			txt = append(txt, fmt.Sprintf("%s[%d]:%d ", cur.curName, cur.arriveTime, cur.totalFlow))
			cur = cur.prev
		}
		for i := len(txt) - 1; i >= 0; i-- {
			fmt.Printf("%s", txt[i])
			if i > 0 {
				fmt.Printf(" ")
			}
		}
		fmt.Printf("\n")
	}
}

func (ps pathSet) total() int {
	total := 0
	for _, p := range ps {
		total += p.totalFlow
	}
	return total
}

// var cacheRates = [totalTime + 1]int{}

func (ps pathSet) validPath() bool {
	for i, p := range ps {
		for j, cur := range ps {
			if i == j {
				continue
				// cur = cur.prev
			}
			for cur != nil {
				if cur.curName == p.curName {
					return false // valve already opened
				}
				cur = cur.prev
			}
		}
	}

	searchers := []string{ps[0].curName, ps[1].curName}
	valves := []string{}
	total := 0
	for _, p := range ps {
		total += p.totalFlow
		cur := p
		for cur.prev != nil {
			valves = append(valves, cur.curName)
			cur = cur.prev
		}
	}
	sort.Strings(searchers)
	sort.Strings(valves)
	key := fmt.Sprintf("%s:%s", strings.Join(searchers, ","), strings.Join(valves, ","))
	if cachePaths[key] > total {
		return false
	}
	cachePaths[key] = total

	return true
}

// return false if the path isn't valid
func (p path) validPath() bool {
	cur := p.prev
	for cur != nil {
		if cur.curName == p.curName {
			return false // valve already opened
		}
		cur = cur.prev
	}
	return true
}

var cachePaths = map[string]int{}

func (p path) bestPath() bool {
	// check another path reached same endpoint with same open valves and a better total flow
	valves := []string{}
	cur := &p
	for cur.prev != nil {
		valves = append(valves, cur.curName)
		cur = cur.prev
	}
	sort.Strings(valves)
	key := fmt.Sprintf("%s:%s", p.curName, strings.Join(valves, ","))
	if cachePaths[key] > p.totalFlow {
		return false
	}
	cachePaths[key] = p.totalFlow
	return true
}

func mustAtoi(s string) int {
	i, err := strconv.Atoi(s)
	if err != nil {
		panic(err)
	}
	return i
}
