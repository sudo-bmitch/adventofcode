package main

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"
)

var debug = true

const (
	decryptKey = 811589153
	mixCount   = 10
)

type packet struct {
	value int
	moved bool
}

func main() {
	packets := []packet{}
	in := bufio.NewScanner(os.Stdin)
	// parse input
	for in.Scan() {
		line := strings.TrimSpace(in.Text())
		if line == "" {
			continue
		}
		val := mustAtoi(line)
		packets = append(packets, packet{value: val})
	}
	if err := in.Err(); err != nil && !errors.Is(err, io.EOF) {
		fmt.Fprintf(os.Stderr, "failed reading from stdin: %v\n", err)
		return
	}

	numPackets := len(packets)
	mixPackets := make([]packet, numPackets)
	copy(mixPackets, packets)
	for i := range mixPackets {
		mixPackets[i].value = mixPackets[i].value * decryptKey
	}
	// update packet template values based on decrypt key and mod size
	decryptMod := decryptKey % (numPackets - 1)
	for i := range packets {
		packets[i].value = packets[i].value * decryptMod
	}
	if debug {
		fmt.Printf("debug: decrypt mod = %d\n", decryptMod)
		// fmt.Printf("input template = ")
		// printPackets(packets)
		fmt.Printf("input mix = ")
		printPackets(mixPackets)
	}
	// run packet mix
	for mc := 0; mc < mixCount; mc++ {
		template := make([]packet, numPackets)
		copy(template, packets)
		for i := 0; i < numPackets; i++ {
			if template[i].moved {
				continue
			}
			if template[i].value%numPackets == 0 {
				// noop
				template[i].moved = true
			}
			// remove from list and reinsert in new offset
			p := template[i]
			p.moved = true
			template = append(template[:i], template[i+1:]...)
			mp := mixPackets[i]
			mixPackets = append(mixPackets[:i], mixPackets[i+1:]...)
			newI := i + p.value
			for newI < 0 {
				newI += (numPackets - 1)
			}
			newI = newI % (numPackets - 1)
			// circular list can add to beginning or end, and end is easier
			if newI == 0 || newI >= numPackets-1 {
				template = append(template, p)
				mixPackets = append(mixPackets, mp)
			} else {
				// add a space to the list
				template = append(template[:newI+1], template[newI:]...)
				template[newI] = p
				mixPackets = append(mixPackets[:newI+1], mixPackets[newI:]...)
				mixPackets[newI] = mp
			}
			// inserted after present position, so next i should be unchanged
			if newI > i {
				i--
			}
		}
		if debug {
			fmt.Printf("Debug: list after %d rounds = ", mc)
			printPackets(mixPackets)
			fmt.Printf("Debug: template after %d rounds = ", mc)
			printPackets(template)
		}
	}

	// find the 0 value
	zeroI := 0
	for i, p := range mixPackets {
		if p.value == 0 {
			zeroI = i
			break
		}
	}
	if debug {
		fmt.Printf("Debug: zero position = %d\n", zeroI)
	}

	result := 0
	result += mixPackets[(zeroI+1000)%numPackets].value
	result += mixPackets[(zeroI+2000)%numPackets].value
	result += mixPackets[(zeroI+3000)%numPackets].value
	fmt.Printf("Result: %d\n", result)
}

func printPackets(packets []packet) {
	numPackets := len(packets)
	for i, p := range packets {
		fmt.Printf("%d", p.value)
		if i != numPackets-1 {
			fmt.Printf(", ")
		}
	}
	fmt.Printf("\n")
}

// func max(a, b int) int {
// 	if a > b {
// 		return a
// 	}
// 	return b
// }

func mustAtoi(s string) int {
	i, err := strconv.Atoi(s)
	if err != nil {
		panic(err)
	}
	return i
}
